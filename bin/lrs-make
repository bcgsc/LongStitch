#!/usr/bin/make -rRf

# Input files
draft=draft
reads=reads

# Find the complete long read file name
fastq=$(shell test -f $(reads).fq.gz && echo "true")
fasta=$(shell test -f $(reads).fa.gz && echo "true")
ifeq ($(fastq), true)
long_reads=$(reads).fq.gz
endif
ifeq ($(fasta), true)
long_reads=$(reads).fa.gz
endif

# Common parameters
z=1000
t=8

# Default Tigmint parameters
span=auto
G=-1

# Default ntJoin parameters
k=24
w=250

# Default ARCS+LINKS parameters
s=70
c=4
l=4
a=0.3

# Fixed parameters; set for naming purposes
cut=250
n=2
m=8-10000
r=0.05
e=30000
D=true

# Use pigz or bgzip for parallel compression if available.
ifneq ($(shell command -v pigz),)
gzip=pigz -p$t
else
ifneq ($(shell command -v bgzip),)
gzip=bgzip -@$t
else
gzip=gzip
endif
endif

.PHONY: all version help clean tigmint ntJoin tigmint-ntjoin ntJoin-with-tigmint tigmint-arcs arcs-with-tigmint ntJoin-arcs arcs-with-ntJoin tigmint-ntJoin-arcs arcs-with-tigmint-ntJoin
.DELETE_ON_ERROR:
.SECONDARY:

all: help
# Help
help:
	@echo "Usage: ./lrs-make [COMMAND] [OPTION=VALUE]â€¦"
	@echo "	Commands:"
	@echo ""
	@echo "	tigmint-ntJoin		run Tigmint, then run ntJoin with the output of Tigmint"
	@echo "	tigmint-arcs		run Tigmint, then run ARCS with the output of Tigmint"
	@echo "	ntJoin-arcs		run ntJoin, then run ARCS with the output of ntJoin"
	@echo "	tigmint-ntJoin-arcs	run Tigmint, ntJoin, then ARCS"
	@echo ""
	@echo "	General options:"
	@echo "	draft			draft name [draft]. File must have .fa extension"
	@echo "	reads			read name [reads]. File must have .fq.gz or .fa.gz extension"
	@echo ""
	@echo "	Tigmint options:"
	@echo "	span			min number of spanning molecules to be considered assembled [auto]"
	@echo ""
	@echo "	ntJoin options:"
	@echo "	k			k-mer size for minimizers [24]"
	@echo "	w			window size for minimizers (bp) [250]"
	@echo ""
	@echo "	ARCS+LINKS options:"
	@echo "	s			minimum sequence identity [70]"
	@echo "	c			minimum aligned read pairs per molecule [4]"	
	@echo "	l			minimum number of links to compute scaffold [4]"
	@echo "	a			maximum link ratio between two best contain pairs [0.3]"

clean:
	rm -f *.amb *.ann *.bwt *.pac *.sa *.dist.gv *.fai *.bed *.molecule.tsv *.sortbx.bai *.k$(k).w$(w).tsv *.k$(k).w$(w).tsv
	@echo "Clean Done" 

# Run tigmint-long
tigmint-ntJoin-arcs: tigmint-ntJoin arcs-with-tigmint-ntJoin
tigmint-ntJoin: tigmint ntJoin-with-tigmint
tigmint-arcs: tigmint arcs-with-tigmint
tigmint: $(reads).cut$(cut).fa.gz $(draft).cut$(cut).tigmint.fa
	
$(draft).cut$(cut).tigmint.fa: $(draft).fa $(long_reads)
	tigmint-make tigmint-long draft=$(draft) reads=$(reads) span=$(span) cut=$(cut) t=$t G=$G

# Run ntJoin-long
ntJoin-with-tigmint: $(draft).cut$(cut).tigmint.fa.k$k.w$w.n$n.z$z.abyss-scaffold.fa
ntJoin-arcs: ntJoin arcs-with-ntJoin
ntJoin: $(draft).fa.k$k.w$w.n$n.z$z.abyss-scaffold.fa

%.tigmint.fa.k$k.w$w.n$n.z$z.abyss-scaffold.fa: %.tigmint.fa $(long_reads)
	ntJoin_long abyss_scaffold target=$< reads="$(long_reads)" t=$t k=$k w=$w z=$z n=$n

$(draft).fa.k$k.w$w.n$n.z$z.abyss-scaffold.fa: $(draft).fa $(long_reads)
	ntJoin_long abyss_scaffold target=$< reads="$(long_reads)" t=$t k=$k w=$w z=$z n=$n

# Run arcs-long
arcs-with-ntJoin: $(draft).fa.k$k.w$w.n$n.z$z.abyss-scaffold_c$c_m$m_cut$(cut)_s$s_r$r_e$e_z$z_l$l_a$a.scaffolds.fa
arcs-with-tigmint: $(draft).cut$(cut).tigmint_c$c_m$m_cut$(cut)_s$s_r$r_e$e_z$z_l$l_a$a.scaffolds.fa
arcs-with-tigmint-ntJoin: $(draft).cut$(cut).tigmint.fa.k$k.w$w.n$n.z$z.abyss-scaffold_c$c_m$m_cut$(cut)_s$s_r$r_e$e_z$z_l$l_a$a.scaffolds.fa

$(draft).fa.k$k.w$w.n$n.z$z.abyss-scaffold_c$c_m$m_cut$(cut)_s$s_r$r_e$e_z$z_l$l_a$a.scaffolds.fa: $(draft).fa.k$k.w$w.n$n.z$z.abyss-scaffold.fa $(long_reads)
	arcs-make arcs-long draft=$(draft).fa.k$k.w$w.n$n.z$z.abyss-scaffold reads=$(reads) m=$m cut=$(cut) s=$s l=$l c=$c a=$a D=$D z=$z

%.tigmint_c$c_m$m_cut$(cut)_s$s_r$r_e$e_z$z_l$l_a$a.scaffolds.fa: %.tigmint.fa $(long_reads)
	arcs-make arcs-long draft=$(draft).cut$(cut).tigmint reads=$(reads) m=$m cut=$(cut) s=$s l=$l c=$c a=$a D=$D z=$z

%.tigmint.fa.k$k.w$w.n$n.z$z.abyss-scaffold_c$c_m$m_cut$(cut)_s$s_r$r_e$e_z$z_l$l_a$a.scaffolds.fa: %.tigmint.fa.k$k.w$w.n$n.z$z.abyss-scaffold.fa $(long_reads)
	arcs-make arcs-long draft=$(draft).cut$(cut).tigmint.fa.k$k.w$w.n$n.z$z.abyss-scaffold reads=$(reads) m=$m cut=$(cut) s=$s l=$l c=$c a=$a D=$D z=$z

# Pre-processing long reads; cut into shorter segments
$(reads).cut$(cut).fa.gz: $(long_reads)
	gunzip -c $< | long-to-linked-pe -l$(cut) | $(gzip) > $@
